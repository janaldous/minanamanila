/* tslint:disable */
/* eslint-disable */
/**
 * minanamanila-api
 * Minanamanila API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: jat.torres@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressLineOne?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    addressLineTwo?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    billing?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    country?: string;
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    province?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    shipping?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    specialInstructions?: string;
}
/**
 * 
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    line1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    postcode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    province?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    specialInstructions?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDto
     */
    village?: string;
}
/**
 * 
 * @export
 * @interface DeliveryDate
 */
export interface DeliveryDate {
    /**
     * 
     * @type {string}
     * @memberof DeliveryDate
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof DeliveryDate
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof DeliveryDate
     */
    orderLimit?: number;
}
/**
 * 
 * @export
 * @interface DeliveryDateDto
 */
export interface DeliveryDateDto {
    /**
     * 
     * @type {string}
     * @memberof DeliveryDateDto
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof DeliveryDateDto
     */
    orderLimit?: number;
}
/**
 * 
 * @export
 * @interface OrderConfirmation
 */
export interface OrderConfirmation {
    /**
     * 
     * @type {string}
     * @memberof OrderConfirmation
     */
    deliveryDate: string;
    /**
     * 
     * @type {number}
     * @memberof OrderConfirmation
     */
    orderNumber: number;
    /**
     * 
     * @type {string}
     * @memberof OrderConfirmation
     */
    orderStatus: OrderConfirmationOrderStatusEnum;
    /**
     * 
     * @type {UserDto}
     * @memberof OrderConfirmation
     */
    user: UserDto;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderConfirmationOrderStatusEnum {
    REGISTERED = 'REGISTERED',
    COOKING = 'COOKING',
    OTW = 'OTW',
    DELIVERED = 'DELIVERED'
}

/**
 * 
 * @export
 * @interface OrderDetail
 */
export interface OrderDetail {
    /**
     * 
     * @type {Address}
     * @memberof OrderDetail
     */
    billing?: Address;
    /**
     * 
     * @type {DeliveryDate}
     * @memberof OrderDetail
     */
    deliveryDate?: DeliveryDate;
    /**
     * 
     * @type {string}
     * @memberof OrderDetail
     */
    deliveryType?: OrderDetailDeliveryTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof OrderDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDetail
     */
    orderDate?: string;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof OrderDetail
     */
    orderItems?: Array<OrderItem>;
    /**
     * 
     * @type {string}
     * @memberof OrderDetail
     */
    paymentType?: OrderDetailPaymentTypeEnum;
    /**
     * 
     * @type {Address}
     * @memberof OrderDetail
     */
    shipping?: Address;
    /**
     * 
     * @type {number}
     * @memberof OrderDetail
     */
    total?: number;
    /**
     * 
     * @type {OrderTracking}
     * @memberof OrderDetail
     */
    tracking?: OrderTracking;
    /**
     * 
     * @type {User}
     * @memberof OrderDetail
     */
    user?: User;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderDetailDeliveryTypeEnum {
    DELIVER = 'DELIVER',
    PICKUP = 'PICK_UP',
    MEETUP = 'MEET_UP'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderDetailPaymentTypeEnum {
    CASH = 'CASH',
    GCASH = 'GCASH'
}

/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {AddressDto}
     * @memberof OrderDto
     */
    address: AddressDto;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    deliveryDateId: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    deliveryType: OrderDtoDeliveryTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    paymentType: OrderDtoPaymentTypeEnum;
    /**
     * 
     * @type {Array<ProductDto>}
     * @memberof OrderDto
     */
    products: Array<ProductDto>;
    /**
     * 
     * @type {UserDto}
     * @memberof OrderDto
     */
    user: UserDto;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderDtoDeliveryTypeEnum {
    DELIVER = 'DELIVER',
    PICKUP = 'PICK_UP',
    MEETUP = 'MEET_UP'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderDtoPaymentTypeEnum {
    CASH = 'CASH',
    GCASH = 'GCASH'
}

/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    buyingPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    id?: number;
    /**
     * 
     * @type {Product}
     * @memberof OrderItem
     */
    product?: Product;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    productCount?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface OrderTracking
 */
export interface OrderTracking {
    /**
     * 
     * @type {string}
     * @memberof OrderTracking
     */
    dateLastUpdated?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderTracking
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderTracking
     */
    status?: OrderTrackingStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderTrackingStatusEnum {
    REGISTERED = 'REGISTERED',
    COOKING = 'COOKING',
    OTW = 'OTW',
    DELIVERED = 'DELIVERED'
}

/**
 * 
 * @export
 * @interface OrderUpdateDto
 */
export interface OrderUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof OrderUpdateDto
     */
    status: OrderUpdateDtoStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderUpdateDtoStatusEnum {
    REGISTERED = 'REGISTERED',
    COOKING = 'COOKING',
    OTW = 'OTW',
    DELIVERED = 'DELIVERED'
}

/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    brand?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Product
     */
    categories?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    srp?: number;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    unitPrice?: number;
}
/**
 * 
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    quantity?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    role?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    contactNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    lastName: string;
}

/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary authCheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary authCheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCheckUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AdminControllerApiAxiosParamCreator(configuration).authCheckUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary authCheck
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCheckUsingGET(options?: any): AxiosPromise<string> {
            return AdminControllerApiFp(configuration).authCheckUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI {
    /**
     * 
     * @summary authCheck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminControllerApi
     */
    public authCheckUsingGET(options?: any) {
        return AdminControllerApiFp(this.configuration).authCheckUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAppConfigs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigsUsingGET: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/config`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getAppConfigs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppConfigsUsingGET(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await AuthControllerApiAxiosParamCreator(configuration).getAppConfigsUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getAppConfigs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppConfigsUsingGET(options?: any): AxiosPromise<string> {
            return AuthControllerApiFp(configuration).getAppConfigsUsingGET(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @summary getAppConfigs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public getAppConfigsUsingGET(options?: any) {
        return AuthControllerApiFp(this.configuration).getAppConfigsUsingGET(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeliveryControllerApi - axios parameter creator
 * @export
 */
export const DeliveryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createDeliveryDate
         * @param {DeliveryDateDto} deliveryDate deliveryDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeliveryDateUsingPOST: async (deliveryDate: DeliveryDateDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deliveryDate' is not null or undefined
            if (deliveryDate === null || deliveryDate === undefined) {
                throw new RequiredError('deliveryDate','Required parameter deliveryDate was null or undefined when calling createDeliveryDateUsingPOST.');
            }
            const localVarPath = `/admin/delivery`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deliveryDate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deliveryDate !== undefined ? deliveryDate : {}) : (deliveryDate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeliveryControllerApi - functional programming interface
 * @export
 */
export const DeliveryControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createDeliveryDate
         * @param {DeliveryDateDto} deliveryDate deliveryDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeliveryDateUsingPOST(deliveryDate: DeliveryDateDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryDate>> {
            const localVarAxiosArgs = await DeliveryControllerApiAxiosParamCreator(configuration).createDeliveryDateUsingPOST(deliveryDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeliveryControllerApi - factory interface
 * @export
 */
export const DeliveryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createDeliveryDate
         * @param {DeliveryDateDto} deliveryDate deliveryDate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeliveryDateUsingPOST(deliveryDate: DeliveryDateDto, options?: any): AxiosPromise<DeliveryDate> {
            return DeliveryControllerApiFp(configuration).createDeliveryDateUsingPOST(deliveryDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeliveryControllerApi - object-oriented interface
 * @export
 * @class DeliveryControllerApi
 * @extends {BaseAPI}
 */
export class DeliveryControllerApi extends BaseAPI {
    /**
     * 
     * @summary createDeliveryDate
     * @param {DeliveryDateDto} deliveryDate deliveryDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryControllerApi
     */
    public createDeliveryDateUsingPOST(deliveryDate: DeliveryDateDto, options?: any) {
        return DeliveryControllerApiFp(this.configuration).createDeliveryDateUsingPOST(deliveryDate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderControllerApi - axios parameter creator
 * @export
 */
export const OrderControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getOrder
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderUsingGET: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrderUsingGET.');
            }
            const localVarPath = `/admin/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getOrders
         * @param {'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersUsingGET: async (status?: 'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateOrder
         * @param {string} id id
         * @param {OrderUpdateDto} orderDto orderDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderUsingPUT: async (id: string, orderDto: OrderUpdateDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateOrderUsingPUT.');
            }
            // verify required parameter 'orderDto' is not null or undefined
            if (orderDto === null || orderDto === undefined) {
                throw new RequiredError('orderDto','Required parameter orderDto was null or undefined when calling updateOrderUsingPUT.');
            }
            const localVarPath = `/admin/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof orderDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(orderDto !== undefined ? orderDto : {}) : (orderDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderControllerApi - functional programming interface
 * @export
 */
export const OrderControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getOrder
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderUsingGET(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDetail>> {
            const localVarAxiosArgs = await OrderControllerApiAxiosParamCreator(configuration).getOrderUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getOrders
         * @param {'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdersUsingGET(status?: 'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDetail>>> {
            const localVarAxiosArgs = await OrderControllerApiAxiosParamCreator(configuration).getOrdersUsingGET(status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateOrder
         * @param {string} id id
         * @param {OrderUpdateDto} orderDto orderDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderUsingPUT(id: string, orderDto: OrderUpdateDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDetail>> {
            const localVarAxiosArgs = await OrderControllerApiAxiosParamCreator(configuration).updateOrderUsingPUT(id, orderDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrderControllerApi - factory interface
 * @export
 */
export const OrderControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getOrder
         * @param {string} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderUsingGET(id: string, options?: any): AxiosPromise<OrderDetail> {
            return OrderControllerApiFp(configuration).getOrderUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getOrders
         * @param {'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED'} [status] status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdersUsingGET(status?: 'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED', options?: any): AxiosPromise<Array<OrderDetail>> {
            return OrderControllerApiFp(configuration).getOrdersUsingGET(status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updateOrder
         * @param {string} id id
         * @param {OrderUpdateDto} orderDto orderDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderUsingPUT(id: string, orderDto: OrderUpdateDto, options?: any): AxiosPromise<OrderDetail> {
            return OrderControllerApiFp(configuration).updateOrderUsingPUT(id, orderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderControllerApi - object-oriented interface
 * @export
 * @class OrderControllerApi
 * @extends {BaseAPI}
 */
export class OrderControllerApi extends BaseAPI {
    /**
     * 
     * @summary getOrder
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public getOrderUsingGET(id: string, options?: any) {
        return OrderControllerApiFp(this.configuration).getOrderUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getOrders
     * @param {'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED'} [status] status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public getOrdersUsingGET(status?: 'REGISTERED' | 'COOKING' | 'OTW' | 'DELIVERED', options?: any) {
        return OrderControllerApiFp(this.configuration).getOrdersUsingGET(status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updateOrder
     * @param {string} id id
     * @param {OrderUpdateDto} orderDto orderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderControllerApi
     */
    public updateOrderUsingPUT(id: string, orderDto: OrderUpdateDto, options?: any) {
        return OrderControllerApiFp(this.configuration).updateOrderUsingPUT(id, orderDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicControllerApi - axios parameter creator
 * @export
 */
export const PublicControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getDeliveryDates
         * @param {number} page page
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryDatesUsingGET: async (page: number, size: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getDeliveryDatesUsingGET.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling getDeliveryDatesUsingGET.');
            }
            const localVarPath = `/api/delivery`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductUsingGET: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProductUsingGET.');
            }
            const localVarPath = `/api/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getProducts
         * @param {number} page page
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsUsingGET: async (page: number, size: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getProductsUsingGET.');
            }
            // verify required parameter 'size' is not null or undefined
            if (size === null || size === undefined) {
                throw new RequiredError('size','Required parameter size was null or undefined when calling getProductsUsingGET.');
            }
            const localVarPath = `/api/products`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary order
         * @param {OrderDto} orderDto orderDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderUsingPOST: async (orderDto: OrderDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDto' is not null or undefined
            if (orderDto === null || orderDto === undefined) {
                throw new RequiredError('orderDto','Required parameter orderDto was null or undefined when calling orderUsingPOST.');
            }
            const localVarPath = `/api/order`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof orderDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(orderDto !== undefined ? orderDto : {}) : (orderDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicControllerApi - functional programming interface
 * @export
 */
export const PublicControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary getDeliveryDates
         * @param {number} page page
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryDatesUsingGET(page: number, size: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeliveryDate>>> {
            const localVarAxiosArgs = await PublicControllerApiAxiosParamCreator(configuration).getDeliveryDatesUsingGET(page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductUsingGET(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await PublicControllerApiAxiosParamCreator(configuration).getProductUsingGET(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getProducts
         * @param {number} page page
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductsUsingGET(page: number, size: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Product>>> {
            const localVarAxiosArgs = await PublicControllerApiAxiosParamCreator(configuration).getProductsUsingGET(page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary order
         * @param {OrderDto} orderDto orderDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderUsingPOST(orderDto: OrderDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderConfirmation>> {
            const localVarAxiosArgs = await PublicControllerApiAxiosParamCreator(configuration).orderUsingPOST(orderDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PublicControllerApi - factory interface
 * @export
 */
export const PublicControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary getDeliveryDates
         * @param {number} page page
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryDatesUsingGET(page: number, size: number, options?: any): AxiosPromise<Array<DeliveryDate>> {
            return PublicControllerApiFp(configuration).getDeliveryDatesUsingGET(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getProduct
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductUsingGET(id: number, options?: any): AxiosPromise<Product> {
            return PublicControllerApiFp(configuration).getProductUsingGET(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary getProducts
         * @param {number} page page
         * @param {number} size size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductsUsingGET(page: number, size: number, options?: any): AxiosPromise<Array<Product>> {
            return PublicControllerApiFp(configuration).getProductsUsingGET(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary order
         * @param {OrderDto} orderDto orderDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderUsingPOST(orderDto: OrderDto, options?: any): AxiosPromise<OrderConfirmation> {
            return PublicControllerApiFp(configuration).orderUsingPOST(orderDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicControllerApi - object-oriented interface
 * @export
 * @class PublicControllerApi
 * @extends {BaseAPI}
 */
export class PublicControllerApi extends BaseAPI {
    /**
     * 
     * @summary getDeliveryDates
     * @param {number} page page
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicControllerApi
     */
    public getDeliveryDatesUsingGET(page: number, size: number, options?: any) {
        return PublicControllerApiFp(this.configuration).getDeliveryDatesUsingGET(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getProduct
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicControllerApi
     */
    public getProductUsingGET(id: number, options?: any) {
        return PublicControllerApiFp(this.configuration).getProductUsingGET(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary getProducts
     * @param {number} page page
     * @param {number} size size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicControllerApi
     */
    public getProductsUsingGET(page: number, size: number, options?: any) {
        return PublicControllerApiFp(this.configuration).getProductsUsingGET(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary order
     * @param {OrderDto} orderDto orderDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicControllerApi
     */
    public orderUsingPOST(orderDto: OrderDto, options?: any) {
        return PublicControllerApiFp(this.configuration).orderUsingPOST(orderDto, options).then((request) => request(this.axios, this.basePath));
    }
}


